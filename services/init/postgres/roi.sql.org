* Regions of Interest (ROI)
#+PROPERTY: header-args:sql s:engine postgresql :cmdline "service=casita" :tangle roi.sql

  Regions of interest are a method of reprojecting and clipping GOES-R data into
  new datasets there are specific to regions and projections for further
  processing.  These products are more likely to be usable by a larger group of
  users.  For example, clipping and reprojecting GOES data to the [[https://spatialreference.org/ref/epsg/3310/][California
  Albers (EPSG:3310)]] makes the data more useful for Statewide datasets.

** Database setup

   We are assuming that postgis is setup for the database, and this is not
   included in the sql script, but for reference, the following commands add
   postgis to the ~public~ schema.

   #+BEGIN_SRC sql :tangle no
     CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;
     COMMENT ON EXTENSION postgis IS 'Postgis Geographic Package';
   #+END_SRC

   Next, we need to add our schema to the default search path. Again, this is
   currently not included in the sql.

   #+BEGIN_SRC sql :tangle no
     alter database :DBNAME set search_path to roi,public;
   #+END_SRC

   #+RESULTS:
   | ALTER DATABASE |
   |----------------|

** Satellite Schema Development

   Schema development for this worker includes some tables that may later be
   made available to a larger group, but for now is relagated to the ~roi~
   schema.  We set the search path, so later calls only include references to
   tables in these schemas.

   #+begin_src sql
     create schema if not exists roi;
     set search_path=roi,public;
   #+end_src

*** GOES Satellites

    These should probably
    The GOES Satellites define the basic projection and full-disk grid system for
    the GOES-R satellites.  Currently, these are only for the ABI satellite. We also
    limit some of the values in our later tables.

    #+BEGIN_SRC sql
      DO $$ BEGIN
      create type goes_id as enum ('east','west');
      create type instrument_id as enum ('abi');
      create type packet_type_id as enum('metadata','data');
      EXCEPTION
        WHEN duplicate_object then null;
          END $$;
    #+END_SRC

    #+RESULTS:
    | DO |
    |----|

*** GOES Instruments
**** ABI
     Later, we should consider moving this data to an ~abi~ schema, so that other
     items (eg. the blocks) can take advantage, but for now we will need to
     convert outside tables to these specifications.

     The abi band table is copied from the [[https://www.goes-r.gov/spacesegment/ABI-tech-summary.html][ABI Summary]] TABLE I. Summary of the wavelength,
     resolution, and sample use and heritage instrument(s) of the ABI bands. The
     minimum and maximum wavelength range represent the full width at half maximum
     (FWHM or 50%) points. [The Instantaneous Geometric Field Of View (IGFOV).] ABI
     Band Central Wavelength(Âµm) Type Nickname Best Spatial Resolution

***** Band Resolution
      There are 4 horizontal spatial resolutions for the ABI imager.  An additional
      ~10km~ reslution is added.  This sets the lowest common denomonator for the
      location of the conus and mesoscale images.  GOES PUG-3 5.1.2.6 describes
      these.  These resolutions are only approximations.  The real resolutions
      correspond to the angular increment of the satellite

      #+BEGIN_SRC sql
        DO $$ BEGIN
                create type abiResolution_id as enum ('500m','1km','2km','10km');
        EXCEPTION
          WHEN duplicate_object then null;
                  END $$;
      #+END_SRC

      #+RESULTS:
      | DO |
      |----|

           #+BEGIN_SRC sql
        create or replace view abiResolution(resolution,size) as
          (VALUES ('500m'::abiResolution_id,1),
          ('1km'::abiResolution_id,2),
          ('2km'::abiResolution_id,4),
          ('10km'::abiResolution_id,20));

      #+END_SRC

      #+RESULTS:
      | CREATE VIEW |
      |-------------|

***** Bands
      Next, we create a set of abiBands. Since we are currently working with external
      tables, we *don't* create enumerated types, but instead simple integers for
      linking.

      #+BEGIN_SRC sql :tangle roi.sql
        create table if not exists abiBands (
          band integer primary key,
          wavelength float not null,
          region text,
          name text,
          resolution abiResolution_id
        );
      #+END_SRC

      #+RESULTS:
      | CREATE TABLE |
      |--------------|

      #+BEGIN_SRC sql
        with bands( band,wavelength,region,name,resolution) as (
          values
          (1,0.47,'Visible','Blue','1km'),
          (2,0.64,'Visible','Red','500m'),
          (3,0.86,'Near-Infrared','Veggie','1km'),
          (4,1.37,'Near-Infrared','Cirrus','2km'),
          (5,1.6,'Near-Infrared','Snow/Ice','1km'),
          (6,2.2,'Near-Infrared','Cloud particle size','2km'),
          (7,3.9,'Infrared','Shortwave window','2km'),
          (8,6.2,'Infrared','Upper-level water vapor','2km'),
          (9,6.9,'Infrared','Midlevel water vapor','2km'),
          (10,7.3,'Infrared','Lower-level water vapor','2km'),
          (11,8.4,'Infrared','Cloud-top phase','2km'),
          (12,9.6,'Infrared','Ozone','2km'),
          (13,10.3,'Infrared','Clean longwave window','2km'),
          (14,11.2,'Infrared','Longwave window','2km'),
          (15,12.3,'Infrared','Dirty longwave window','2km'),
          (16,13.3,'Infrared','CO2 longwave','2km')
        )
            insert into abibands (band,wavelength,region,name,resolution)
        select b.band,b.wavelength,b.region,b.name,b.resolution::abiResolution_id
          from bands b
               left join abibands x using (band) where x is null;

      #+END_SRC

      #+RESULTS:
      | INSERT 0 0 |
      |------------|


****** Band Size
       We want to get the band size with a simple fuction, so we don't always
       need to look it up.

       #+BEGIN_SRC sql
         create or replace function size (
           in band abibands,
           out integer)
           LANGUAGE SQL AS $$
           select r.size
           from abiresolution r
           where r.resolution = band.resolution
           $$;
 #+END_SRC

 #+RESULTS:
 | CREATE FUNCTION |
 |-----------------|

***** Imager
      Each GOES-R satellite has one ABI imager. The Level-1 coordinates are fixed for
      this instrument.  We include the proj4 projection information, so that we can
      easily reproject this data.  The ~SRID~ needs to be global in the database.

      #+BEGIN_SRC sql
        create table if not exists abi (
          goes_id goes_id primary key,
          sat_longitude float,
          sat_height float,
          angle_ul float[2],
          angle_inc float,
          srid integer,
          proj4text text
        );

        with i(goes_id, sat_longitude, sat_height, angle_ul,angle_inc, srid, proj4text) as (
          values
          ('east'::goes_id, -75,35786023,'{-0.151872, 0.151872}'::float[2],14e-6,888887,'+proj=geos +x_0=0 +y_0=0 +lon_0=-75 +sweep=x +h=35786023 +ellps=GRS80 +datum=NAD83 +units=m +no_defs'),
          ('west'::goes_id,-137,35786023,'{-0.151872, 0.151872}'::float[2],14e-6,888897,'+proj=geos +x_0=0 +y_0=0 +lon_0=-137 +sweep=x +h=35786023 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')
        )
            insert into abi(goes_id, sat_longitude, sat_height, angle_ul,angle_inc, srid, proj4text)
        select goes_id, i.sat_longitude, i.sat_height, i.angle_ul,i.angle_inc, i.srid, i.proj4text
          from i left join abi using (goes_id) where abi is null;
      #+END_SRC

      #+RESULTS:
      | CREATE TABLE |
      |--------------|
      | INSERT 0 2   |

****** Proj 4 Updates
       We want to make sure that we add these goes projections into the standard
       locations. Now, there are a few of these GEOS projections. Previously, I had
       tried a number of them to verify the proper projection. After testing,
       I've determined that the correct one is the +proj=goes +sweep=x. Note, that the
       'PROJ coordinate transformation software library; Release 6.1.1' explicitly says
       that GOES uses sweep=x.

       #+BEGIN_SRC sql
         insert into spatial_ref_sys (srid,proj4text)
         select a.srid,a.proj4text
           from abi a
                left join spatial_ref_sys s using (srid)
          where s is null;
       #+END_SRC

       There are multiple resolutions for the various image bands.  They have nominal
       resolutions of 500m, 1km, and 2km.  We want to use these keys in our setup below.

***** ABI Fixed Images
 Now, there are both full-disk and conus imagery that are used. There is also
 mesoscale, that we may want to track here as well, if we did that, we could keep
 track of all the mesoscale versions that come to the satallites. It might be
 better to create some functions to calculate those on the fly.

 #+BEGIN_SRC sql
   DO $$
   BEGIN
   create type image_id as enum ('fulldisk','conus','mesoscale');
   create type fixed_image_id as enum ('east-fulldisk','west-fulldisk','east-conus','west-conus');
   EXCEPTION
     WHEN duplicate_object then null;
   END
   $$;
 #+END_SRC

 #+RESULTS:
 | DO |
 |----|

 #+BEGIN_SRC sql
 create table if not exists abi_fixed_image (
 fixed_image_id fixed_image_id primary key,
 goes_id goes_id,
 image_id image_id,
 angles box2d,
 rc_box box2d,
 width_height integer[2],
 bbox geometry('Polygon')
 );
 #+END_SRC

 #+RESULTS:
 | CREATE TABLE |
 |--------------|

 All of the parameters can be calculated from the angles frame box that we have
 for the areas of interest.  We may need to create a function for this for the
 mesoscale data at a later date.

 #+BEGIN_SRC sql
   with a(goes_id,name,angles) as
   (values ('east','fulldisk','BOX(-0.151872 -0.151872,0.151872 0.151872)'::BOX2D),
            ('east','conus','BOX(-0.101360 0.044240, 0.038640 0.128240)'::BOX2D),
            ('west','fulldisk','BOX(-0.151872 -0.151872,0.151872 0.151872)'::BOX2D),
            ('west','conus','BOX(-0.070000 0.044240, 0.070000 0.128240)'::BOX2D)
   )
   insert into abi_fixed_image (fixed_image_id,goes_id,image_id,angles,bbox,rc_box,width_height)
   select
   (a.goes_id||'-'||a.name)::fixed_image_id as fixed_image_id,
   a.goes_id::goes_id,
   a.name::image_id,
   a.angles,
   st_setsrid(
   st_makebox2d(st_makepoint(sat_height*st_xmin(a.angles),sat_height*st_ymin(a.angles)),
                st_makepoint(sat_height*st_xmax(a.angles),sat_height*st_ymax(a.angles)))
   ,srid) as bbox,
   st_makebox2d(
    st_makepoint((st_xmin(a.angles)-abi.angle_ul[1])/abi.angle_inc,-(st_ymax(a.angles)-abi.angle_ul[2])/abi.angle_inc),
    st_makepoint((st_xmax(a.angles)-abi.angle_ul[1])/abi.angle_inc,-(st_ymin(a.angles)-abi.angle_ul[2])/abi.angle_inc)) as rc_box,
   ARRAY[(st_xmax(a.angles)-st_xmin(a.angles))/abi.angle_inc,(st_ymax(a.angles)-st_ymin(a.angles))/abi.angle_inc]::integer[2] as width_height
   from abi join
   a on abi.goes_id=a.goes_id::goes_id
     left join abi_fixed_image f
         on (a.goes_id||'-'||a.name)::fixed_image_id=f.fixed_image_id
    where f is null;
 #+END_SRC

 #+RESULTS:
 | INSERT 0 4 |
 |------------|

***** Fixed_Image Blocks
      Now, the fixed images are actually composed of a number of image blocks.  These
      ar fixed for every scan.  I'm not really sure these are required, but they are
      unchanging, unlike meso-scale.

      #+BEGIN_SRC sql
        create table if not exists abi_fixed_image_block (
          fixed_image_block_id text primary key,
          fixed_image_id fixed_image_id,
          box box2d
        );
      #+END_SRC

#+begin_src sql
     with ul(fixed_image_id,row,w,h,cols) as (
       values
  ('west-fulldisk',0,1808,604,'{7232,9040,10848,12656}'),
  ('west-fulldisk',604,1808,1012,'{3616,5424,7232,9040,10848,12656,14464,16272}'),
  ('west-fulldisk',1616,1808,1012,'{3616,5424,7232,9040,10848,12656,14464,16272}'),
  ('west-fulldisk',2628,1808,1012,'{1808,3616,5424,7232,9040,10848,12656,14464,16272,18080}'),
  ('west-fulldisk',3640,1808,1012,'{1808,3616,5424,7232,9040,10848,12656,14464,16272,18080}'),
  ('west-fulldisk',4652,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',5664,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',6676,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',7688,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',8700,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',9712,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',10724,1808,1008,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',11732,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',12744,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',13756,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',14768,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',15780,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',16792,1808,1012,'{0,1808,3616,5424,7232,9040,10848,12656,14464,16272,18080,19888}'),
  ('west-fulldisk',17804,1808,1012,'{1808,3616,5424,7232,9040,10848,12656,14464,16272,18080}'),
  ('west-fulldisk',18816,1808,1012,'{1808,3616,5424,7232,9040,10848,12656,14464,16272,18080}'),
  ('west-fulldisk',19828,1808,1012,'{3616,5424,7232,9040,10848,12656,14464,16272}'),
  ('west-fulldisk',20840,1808,856,'{5424,7232,9040,10848,12656,14464}'),
  ('west-conus',0,1668,852,'{0,3332,6664,8332}'),
  ('west-conus',0,1664,852,'{1668,5000}'),
  ('west-conus',852,1668,1008,'{0,3332,6664,8332}'),
  ('west-conus',852,1664,1008,'{1668,5000}'),
  ('west-conus',1860,1668,1012,'{0,3332,6664,8332}'),
  ('west-conus',1860,1664,1012,'{1668,5000}'),
  ('west-conus',2872,1668,1012,'{0,3332,6664,8332}'),
  ('west-conus',2872,1664,1012,'{1668,5000}'),
  ('west-conus',3884,1668,1012,'{0,3332,6664,8332}'),
  ('west-conus',3884,1664,1012,'{1668,5000}'),
  ('west-conus',4896,1668,1104,'{0,3332,6664,8332}'),
  ('west-conus',4896,1664,1104,'{1668,5000}')),
  u as (
    select fixed_image_id,w,h,row,unnest(cols::integer[]) as col
      from ul
  )
         insert into abi_fixed_image_block
     select format('%s-%s-%s',fixed_image_id,col,row) as fixed_image_block_id,
            fixed_image_id::fixed_image_id,
            st_makebox2d(st_makepoint(col,row),st_makepoint(col+w,row+h)) as box
       from u

#+end_src

#+RESULTS:
| INSERT 0 266 |
|--------------|


****** Block SRID coverage
  You can calculate what the region this corresponds to in the SRID for the
  fixed_image_block as well. This function can be used on any fixed_image_block.

  #+begin_src sql
    create or replace function wsen (
    in b abi_fixed_image_block,
    out geometry('Polygon'))
    LANGUAGE SQL AS $$
    with n as (
      select
        (st_xmin(i.angles)+st_xmin(b.box)*angle_inc)*sat_height as west,
        (st_ymax(i.angles)-st_ymax(b.box)*angle_inc)*sat_height as south,
        (st_xmin(i.angles)+st_xmax(b.box)*angle_inc)*sat_height as east,
        (st_ymax(i.angles)-st_ymin(b.box)*angle_inc)*sat_height as north,
        angle_inc*sat_height as res,
        g.srid
        from abi_fixed_image i
             join abi g using (goes_id)
       where b.fixed_image_id=i.fixed_image_id
    )
      select
      st_setsrid(
        st_makebox2d(
          st_makepoint(west,south),st_makepoint(east,north)),srid) as boundary
          from n;
      $$;
  #+end_src

  #+RESULTS:
  | CREATE FUNCTION |
  |-----------------|

  #+begin_src sql :tangle no
      select fixed_image_block_id,st_asewkt(b.wsen)
        from abi_fixed_image_block b
       limit 2;
  #+end_src

  #+RESULTS:
  | fixed_image_block_id | st_asewkt                                                                                                                                                                       |
  |----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | west-fulldisk-7232-0 | SRID=888897;POLYGON((-1811631.628352 5132288.274568,-1811631.628352 5434894.885056,-905815.814176 5434894.885056,-905815.814176 5132288.274568,-1811631.628352 5132288.274568)) |
  | west-fulldisk-9040-0 | SRID=888897;POLYGON((-905815.814176 5132288.274568,-905815.814176 5434894.885056,0 5434894.885056,0 5132288.274568,-905815.814176 5132288.274568))                              |



** Regions of Interest (ROI)
We also need to define our regions of interest. California which is our current
only region of interest.  We'll create a roi table, but for now it just has
California in it.

#+BEGIN_SRC sql
create table if not exists roi (
roi_id text primary key,
srid integer references spatial_ref_sys,
unaligned_box box2d,
box box2d,
boundary geometry('Polygon')
);
#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|

In the past, we've tried to find boundaries that were based on exact binary
components from our ROI. However, in this case, we have resoultions as 500,
1000,2000 and 10000. So, we want an integral number for all these, so we align
to a 10km scale

#+BEGIN_SRC sql
create or replace function alignedTo (
in roi roi, in cnt integer default 10,
out box box2d, out boundary geometry('Polygon'))
LANGUAGE SQL AS $$
with n as (select
(st_xmin(roi.unaligned_box)/500/cnt) as xn,
(st_ymin(roi.unaligned_box)/500/cnt) as yn,
(st_xmax(roi.unaligned_box)/500/cnt) as xx,
(st_ymax(roi.unaligned_box)/500/cnt) as yx
),
nx as (
select
st_makebox2d(
 st_makepoint(case when(xn<0) then floor(xn)*500*cnt else ceil(xn)*500*cnt end,
 case when(yn<0) then floor(yn)*500*cnt else ceil(yn)*500*cnt end),
 st_makepoint(case when(xx<0) then floor(xx)*500*cnt else ceil(xx)*500*cnt end,
  case when(yx<0) then floor(yx)*500*cnt else ceil(yx)*500*cnt end)) as box
from n
)
select box,st_setsrid(box,roi.srid) as boundary
from nx;
$$;
#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

#+BEGIN_SRC sql
with b(roi_id,srid,unaligned_box) as (
 values ('ca',3310,'BOX(-410000 -660000,610000 460000)'::BOX2D)
)
insert into roi (roi_id,srid,unaligned_box)
select roi_id,srid,unaligned_box
from b;
-- And now update these ROIs to be an aligned region
update roi set boundary=(alignedTo(roi)).boundary, box=(alignedTo(roi)).box;
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| UPDATE 1   |

*** Raster Templates
    Once we have an ROI, then we can also create a function that will return an
    empty raster for that ROI, given a size parameter.  This can be used to
    create templates, used, for example, in the reprojection below.

#+BEGIN_SRC sql
  create or replace function empty_raster (
    in roi roi, in in_size integer default 1,
    out raster)
    LANGUAGE SQL AS $$
    select
          st_setsrid(
            st_makeEmptyRaster(
              ((st_xmax(roi.boundary)-st_xmin(roi.boundary))/(in_size*500))::integer,
              ((st_ymax(roi.boundary)-st_ymin(roi.boundary))/(in_size*500))::integer,
              st_xmin(roi.boundary),
              st_ymax(roi.boundary),in_size*500),roi.srid)
  $$;
#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

*** ROI vs Fixed Images
    Since ROIs and fixed images and fixed_image_blocks don't change, we can
    create a table showing the required blocks needed to cover our regions of
    interest.

    #+begin_src sql
      create materialized view roi_x_fixed_image_block as
        select roi_id,fixed_image_block_id
          from abi g join abi_fixed_image fi using (goes_id)
               join abi_fixed_image_block b using (fixed_image_id)
               join roi r on st_intersects(b.wsen,st_transform(r.boundary,g.srid));
    #+end_src

    #+RESULTS:
    | SELECT 8 |
    |----------|



** Reprojection
   Once we have a set of images, and a region of interest, we can combine and
   reproject our input images, into these ROIs.

*** Example Setup
    This is just a setup of what exists in the ring buffer for testing.  I've
    added it to this local setup, for testing, but this should exist in the
    actual production site.

    #+begin_src sql :tangle no

 CREATE TABLE blocks_ring_buffer (
     blocks_ring_buffer_id serial primary key,
     date timestamp without time zone NOT NULL,
     x integer NOT NULL,
     y integer NOT NULL,
     satellite text NOT NULL,
     product text NOT NULL,
     apid text NOT NULL,
     band integer NOT NULL,
     expire timestamp without time zone NOT NULL,
     rast raster NOT NULL
 );

    #+end_src

    #+RESULTS:
    | CREATE TABLE |
    |--------------|

    I copied in some example data with:

    #+begin_src sql :tangle no
      \COPY blocks_ring_buffer from ring_buffer.csv with csv header
    #+end_src

    #+RESULTS:
    | COPY 2287 |
    |-----------|

    And now we can look at this data.

    #+begin_src sql :tangle no
      select x,y,satellite,
             product,apid,band,count(*)
        from blocks_ring_buffer
       group by x,y,satellite,product,apid,band
    #+end_src

    #+RESULTS:
    |    x |   y | satellite | product  | apid | band | count |
    |------+-----+-----------+----------+------+------+-------|
    | 1666 | 213 | west      | conus    | b6   |    7 |   529 |
    | 3164 | 657 | west      | fulldisk | 96   |    7 |   367 |
    | 3164 | 910 | west      | fulldisk | 96   |    7 |   360 |
    | 1666 | 465 | west      | conus    | b6   |    7 |   516 |
    | 2083 | 465 | west      | conus    | b6   |    7 |   515 |

*** Projections
    When adding in the ring buffer data, we need to do some converions. For the
    block_ring_buffer, we have the x,y coordinates but in the apid band space.

    For now, I'll add a blocks_ring_buffer_id for the data, and use that to get
    all the info we need.

    #+begin_src sql
      create or replace function fixed_image_block_id (
      in block blocks_ring_buffer,
      out text)
      LANGUAGE SQL AS $$
        select format('%s-%s-%s-%s',block.satellite,block.product,block.x*size,block.y*size)
            from abibands join abiresolution res using (resolution)
           where abibands.band=block.band
        $$;
    #+end_src

    #+RESULTS:
    | CREATE FUNCTION |
    |-----------------|

    For any block, it's nice to know what the default resoltion is. This fuction
    can be used like a column of the ring_buffer.

    #+begin_src sql
      create or replace function resolution (
        in block blocks_ring_buffer,
        out float)
        LANGUAGE SQL AS $$
        select
        angle_inc*sat_height as resolution
        from abi
        join abi_fixed_image i using (goes_id),
        abibands b join abiresolution using (resolution)
        where block.satellite::goes_id=abi.goes_id
        and block.band=b.band
        and i.image_id=block.product::image_id
        $$;
    #+end_src

    #+RESULTS:
    | CREATE FUNCTION |
    |-----------------|

    We can actually create an entire boundary that shows the boundary of the
    ring buffer blocks using the input data. This is currently a function, but
    it would be nice to make this an actual column of the ring buffer, so we
    could create an index on the boundaries.

    #+begin_src sql
      create or replace function wsen (
      in block blocks_ring_buffer,
      out geometry('Polygon'))
      LANGUAGE SQL AS $$
        with n as (
          select
            (st_xmin(i.angles)+block.x*size*angle_inc)*sat_height as west,
            (st_ymax(i.angles)-(block.y+(st_metadata(block.rast)).height)*size*angle_inc)*sat_height as south,
            (st_xmin(i.angles)+(block.x+(st_metadata(block.rast)).width)*size*angle_inc)*sat_height as east,
            (st_ymax(i.angles)-block.y*size*angle_inc)*sat_height as north,
            angle_inc*sat_height as resolution,
            srid
            from abi join abi_fixed_image i using (goes_id),
                 abibands b join abiresolution using (resolution)
           where block.satellite::goes_id=abi.goes_id
             and block.band=b.band
             and i.image_id=block.product::image_id
        )
        select
        st_setsrid(
          st_makebox2d(
            st_makepoint(west,south),st_makepoint(east,north)),srid) as boundary
        from n
      $$;
    #+end_src

    #+RESULTS:
    | CREATE FUNCTION |
    |-----------------|

    And finally, the ring_buffer raster data is unprojected.  This fuction
    converts it to a projected raster.

    #+begin_src sql
      create or replace function image (
      in block blocks_ring_buffer,
      out raster)
      LANGUAGE SQL AS $$
        select st_setsrid(
          st_setGeoReference(block.rast,
                             st_xmin(wsen(block)),
                             st_ymax(wsen(block)),
                             block.resolution,
                             -block.resolution,0,0),
                             st_srid(block.wsen))
        $$;
    #+end_src

    #+RESULTS:
    | CREATE FUNCTION |
    |-----------------|


*** ROI blocks
   And now for any date in the ring buffer, we can say how many are ready to go.

   #+begin_src sql
     create table products (
       product_id text primary key,
       description text
       );
   #+end_src


   #+RESULTS:
   |---|

      #+begin_src sql
        insert into products(product_id,description)
        values
        ('conus','Per band CONUS image product'),
        ('fulldisk','Per band fulldisk image product'),
        ('ca-hourly-max','Per band hourly max value'),
        ('ca-hourly-max-10d-average','10 day running average of ca-hourly-max'),
        ('ca-hourly-max-10d-max','10 day running max of ca-hourly-max'),
        ('ca-hourly-max-10d-min','10 day running min of ca-hourly-max'),
        ('ca-hourly-max-10d-stddev','10 day running stddev of ca-hourly-max')
        ;

   #+end_src

   #+RESULTS:
   | INSERT 0 7 |
   |------------|


   #+begin_src sql
     create table roi_buffer (
       roi_buffer_id serial primary key,
       roi_id text references roi(roi_id),
       product_id text references products(product_id),
       band integer references abibands(band),
       date timestamp,
       expire timestamp,
       rast raster,
       boundary geometry('Polygon'),
       unique(roi_id,date,product_id,band)
     );
   #+end_src

   #+RESULTS:
   | CREATE TABLE |
   |--------------|

   Since the ring_buffer includes all products(conus,fulldisk,etc), bands, and
   dates, and we have multiple regions of interest, we need a function to
   reproject the data.
    #+begin_src sql
      create or replace function blocks_to_roi (
        in in_date timestamp,
        in in_band abibands,
        in roi roi,
        in in_product text,
        out raster)
      LANGUAGE SQL AS $$
      with
      blocks_in as (
        select image(rb) as image
          from
            blocks_ring_buffer rb
            join roi_x_fixed_image_block f on rb.fixed_image_block_id=f.fixed_image_block_id
         where rb.date=in_date
           and rb.band=in_band.band
           and roi.roi_id=f.roi_id
           and in_product=rb.product
      )
      select
      st_clip(
        st_transform(st_union(image),empty_raster(roi,in_band.size)),
        roi.boundary) as rast
        from
        blocks_in
        $$;
#+end_src

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

We probably want to allow use directly from the roi id and the band, so we'll
add another version.

    #+begin_src sql
      create or replace function blocks_to_roi (
        in in_date timestamp,
        in in_band_number integer,
        in in_roi_id text,
        in in_product text,
        out raster)
      LANGUAGE SQL AS $$
      with
      blocks_in as (
        select image(rb) as image
          from
            blocks_ring_buffer rb
            join roi_x_fixed_image_block f on rb.fixed_image_block_id=f.fixed_image_block_id
         where rb.date=in_date
           and rb.band=in_band_number
           and in_roi_id=f.roi_id
           and in_product=rb.product
      )
      select
      st_clip(
        st_transform(st_union(image),
                     empty_raster((select roi from roi where roi_id=in_roi_id),
                     (select b.size from abiBands b where b.band=in_band_number))),
        (select boundary from roi where roi_id=in_roi_id)) as rast
        from
        blocks_in
        $$;
#+end_src

#+RESULTS:
| CREATE FUNCTION |
|-----------------|



*** Example Use
This could be used to create a single raster, or a number of them.

Here is a simple example using function that uses the primary keys. This example
gets the statistics of the reporjected raster.

#+begin_src sql :tangle no
    select (st_metadata(rast)).*,(st_summarystats(rast)).*
      from blocks_to_roi('2022-06-14 21:01:17',7,'ca','conus') as rast;
#+end_src

#+RESULTS:
| upperleftx | upperlefty | width | height | scalex | scaley | skewx | skewy | srid | numbands | count |   sum |             mean |           stddev | min |  max |
|------------+------------+-------+--------+--------+--------+-------+-------+------+----------+-------+-------+------------------+------------------+-----+------|
|    -410000 |     460000 |    82 |    373 |   2000 |  -2000 |     0 |     0 | 3310 |        1 |    36 | 45601 | 1266.69444444444 | 380.517251721948 | 612 | 1810 |

This could insert  that data into the roi_buffer

#+begin_src sql :tangle no
  insert into roi_buffer(date,band,expire,roi_id,product_id,rast)
    select date, band, date+'10 days'::interval, roi_id,product_id,
           blocks_to_roi(date,band,roi_id,product_id)
      from
  (values
         ('2022-06-14 21:01:17'::date,7,'ca','conus'))
    as foo(date,band,roi_id,product_id);

#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|


For example, this creates roi_buffer data for all products are currently not in
the roi_buffer database.

#+begin_src sql :tangle no
  with g as (
    select roi_id,date,product,band,count(*)
      from blocks_ring_buffer rb
           join roi_x_fixed_image_block x
               on rb.fixed_image_block_id=x.fixed_image_block_id
     group by roi_id,date,product,band
    having (count(*) > 3)
     order by count(*) desc
  )
      insert into roi_buffer(roi_id,date,product,band,rast)
  select roi_id,date,product,
         band,blocks_to_roi(date,abibands,roi,product)
    from g
         join roi using (roi_id)
         join abibands using (band);
#+end_src
